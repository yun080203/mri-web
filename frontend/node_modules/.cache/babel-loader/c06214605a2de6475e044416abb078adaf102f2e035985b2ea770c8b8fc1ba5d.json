{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\mri-web-app\\\\frontend\\\\src\\\\components\\\\ImageUpload\\\\ImageUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { message, Upload, Button, Space, Card, Progress, List, Select, Modal, Form, Input, InputNumber } from 'antd';\nimport { UploadOutlined, PlusOutlined } from '@ant-design/icons';\nimport './ImageUpload.css';\nimport { axiosInstance } from '../../utils/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\n\n// 图像压缩函数\nconst compressImage = async file => {\n  return new Promise(resolve => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = event => {\n      const img = new Image();\n      img.src = event.target.result;\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // 计算新的尺寸\n        let width = img.width;\n        let height = img.height;\n        const maxSize = 1200; // 最大尺寸\n\n        if (width > height && width > maxSize) {\n          height = Math.round(height * maxSize / width);\n          width = maxSize;\n        } else if (height > maxSize) {\n          width = Math.round(width * maxSize / height);\n          height = maxSize;\n        }\n        canvas.width = width;\n        canvas.height = height;\n\n        // 绘制压缩后的图像\n        ctx.drawImage(img, 0, 0, width, height);\n\n        // 转换为Blob\n        canvas.toBlob(blob => {\n          resolve(new File([blob], file.name, {\n            type: 'image/jpeg',\n            lastModified: Date.now()\n          }));\n        }, 'image/jpeg', 0.7); // 0.7是压缩质量\n      };\n    };\n  });\n};\nconst ALLOWED_EXTENSIONS = ['.dcm', '.nii', '.nii.gz'];\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\n\nconst ImageUpload = ({\n  selectedPatient,\n  onUploadSuccess,\n  hidePatientSelect,\n  autoProcess = false\n}) => {\n  _s();\n  const [fileList, setFileList] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [uploadedImageId, setUploadedImageId] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [processingLogs, setProcessingLogs] = useState([]);\n  const [patients, setPatients] = useState([]);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [showPatientModal, setShowPatientModal] = useState(false);\n  const [form] = Form.useForm();\n\n  // 获取患者列表\n  useEffect(() => {\n    if (!hidePatientSelect) {\n      fetchPatients();\n    }\n  }, [hidePatientSelect]);\n  const fetchPatients = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/api/patients`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      setPatients(response.data.patients);\n    } catch (error) {\n      message.error('获取患者列表失败');\n      console.error('获取患者列表错误:', error);\n    }\n  };\n  const handleCreatePatient = async values => {\n    try {\n      const response = await axios.post(`${API_BASE}/api/patients`, values, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (response.data.success) {\n        message.success('患者创建成功');\n        setShowPatientModal(false);\n        form.resetFields();\n        fetchPatients();\n        form.setFieldsValue({\n          patient: response.data.patient.id\n        });\n      }\n    } catch (error) {\n      message.error('创建患者失败');\n      console.error('创建患者错误:', error);\n    }\n  };\n  const handleUpload = async () => {\n    const patientId = selectedPatient || form.getFieldValue('patient');\n    if (!patientId) {\n      message.error('请先选择患者');\n      return;\n    }\n    setUploading(true);\n    setProgress(0);\n    setProcessingLogs([]);\n    // 不清除预览图，保留用户上传时的预览\n    // setPreviewImage(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', fileList[0]);\n      formData.append('patient_id', patientId);\n      const response = await axiosInstance.post('/api/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setProgress(percentCompleted);\n        }\n      });\n      console.log('上传响应:', response.data);\n\n      // 检查响应数据\n      if (!response.data) {\n        throw new Error('服务器没有返回数据');\n      }\n      if (response.data.message === '文件上传成功' && response.data.image) {\n        // 成功处理\n        const imageId = response.data.image.id || response.data.image._id;\n        console.log('设置图像ID:', imageId);\n        setUploadedImageId(imageId);\n        message.success('上传成功');\n        setProcessingLogs(prevLogs => [...prevLogs, `文件上传成功: ${response.data.image.filename || fileList[0].name}`]);\n        if (onUploadSuccess) {\n          onUploadSuccess(response.data.image);\n        }\n\n        // 如果服务器返回了预览图数据，直接使用\n        if (response.data.image.preview) {\n          setPreviewImage(`data:image/png;base64,${response.data.image.preview}`);\n          setProcessingLogs(prevLogs => [...prevLogs, '预览图获取成功']);\n        }\n        // 否则尝试单独获取预览图\n        else if (response.data.image.filename) {\n          try {\n            await fetchPreviewImage(response.data.image.filename);\n          } catch (error) {\n            console.error('获取预览图失败，保留原有预览');\n            // 预览获取失败时保留原有预览，不影响后续处理\n          }\n        }\n        console.log('上传完成，uploadedImageId:', imageId, '处理状态:', processing);\n      } else {\n        throw new Error(response.data.message || '上传失败');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('上传错误:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `上传失败: ${error.message || '未知错误'}`]);\n      message.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || '上传失败');\n    } finally {\n      setUploading(false);\n      setProgress(0);\n      setFileList([]);\n    }\n  };\n  const fetchPreviewImage = async filename => {\n    if (!filename) {\n      console.error('获取预览图失败: 文件名为空');\n      return;\n    }\n    setImageLoading(true);\n    try {\n      // 使用相对路径，让axiosInstance处理baseURL\n      const response = await axiosInstance.get(`/api/preview/${filename}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        // 添加withCredentials配置\n        withCredentials: true\n      });\n      console.log('预览图响应:', response.data);\n      if (response.data.status === 'success' && response.data.image) {\n        setPreviewImage(`data:image/png;base64,${response.data.image}`);\n        setProcessingLogs(prevLogs => [...prevLogs, '预览图生成成功']);\n      } else {\n        throw new Error(response.data.message || '获取预览图失败：服务器返回的数据格式不正确');\n      }\n    } catch (error) {\n      console.error('获取预览图失败:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `获取预览图失败: ${error.message || '未知错误'}`]);\n      // 不显示错误消息，因为预览图获取失败不影响主要功能\n      // message.error('获取预览图失败');\n    } finally {\n      setImageLoading(false);\n    }\n  };\n  const handleProcess = async (imageId = null) => {\n    const targetImageId = imageId || uploadedImageId;\n    if (!targetImageId) {\n      message.error('没有可处理的图像');\n      return;\n    }\n    setProcessing(true);\n    setProcessingLogs(prevLogs => [...prevLogs, '开始处理图像...']);\n    try {\n      console.log('开始处理图像, imageId:', targetImageId);\n      const response = await axiosInstance.post('/api/process', {\n        image_id: targetImageId\n      });\n      console.log('处理响应:', response.data);\n      if (response.data.task_id) {\n        setProcessingLogs(prevLogs => [...prevLogs, `任务ID: ${response.data.task_id}`]);\n        // 立即开始轮询状态\n        pollProcessingStatus(response.data.task_id);\n      } else {\n        throw new Error('未获取到任务ID');\n      }\n    } catch (error) {\n      console.error('处理请求失败:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `处理失败: ${error.message || '未知错误'}`]);\n      message.error('处理请求失败');\n      setProcessing(false);\n    }\n  };\n  const pollProcessingStatus = async taskId => {\n    if (!taskId) {\n      console.error('轮询错误: 未提供taskId');\n      setProcessing(false);\n      return;\n    }\n    let pollCount = 0;\n    let startTime = Date.now();\n    const PHASE_1_DURATION = 7 * 60 * 1000; // 7分钟\n    const PHASE_2_DURATION = 13 * 60 * 1000; // 13分钟\n    const MAX_DURATION = 30 * 60 * 1000; // 30分钟\n    let pollTimer = null;\n    const getPollingInterval = () => {\n      const elapsedTime = Date.now() - startTime;\n      if (elapsedTime < PHASE_1_DURATION) {\n        return 30000; // 0-7分钟：30秒\n      } else if (elapsedTime < PHASE_2_DURATION) {\n        return 10000; // 7-13分钟：10秒（高频期）\n      } else {\n        return 60000; // 13分钟后：60秒\n      }\n    };\n    const checkStatus = async () => {\n      try {\n        const elapsedTime = Date.now() - startTime;\n        const elapsedMinutes = Math.floor(elapsedTime / 60000);\n        const elapsedSeconds = Math.floor(elapsedTime % 60000 / 1000);\n        const currentInterval = getPollingInterval() / 1000;\n        console.log(`检查处理状态 (${pollCount + 1}次, 已耗时: ${elapsedMinutes}分${elapsedSeconds}秒, 当前轮询间隔: ${currentInterval}秒), taskId:`, taskId);\n        const response = await axiosInstance.get(`/api/status/${taskId}`, {\n          withCredentials: true,\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        console.log('状态响应:', response.data);\n        if (!response.data) {\n          throw new Error('未收到状态数据');\n        }\n        const status = response.data.status;\n\n        // 只在状态变化时添加日志\n        if (!processingLogs.includes(`当前状态: ${status}`)) {\n          const phase = elapsedTime < PHASE_1_DURATION ? '初始阶段' : elapsedTime < PHASE_2_DURATION ? '高频检查阶段' : '最终阶段';\n          setProcessingLogs(prevLogs => [...prevLogs, `当前状态: ${status} (${phase})`]);\n        }\n        if (status === 'completed' || status === 'success') {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          setProcessingLogs(prevLogs => [...prevLogs, `处理完成 (总耗时: ${elapsedMinutes}分${elapsedSeconds}秒)`]);\n          await fetchResults(taskId);\n          message.success('处理完成');\n          return;\n        } else if (status === 'failed' || status === 'error') {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          const errorMsg = response.data.error || '处理失败';\n          setProcessingLogs(prevLogs => [...prevLogs, `错误: ${errorMsg} (总耗时: ${elapsedMinutes}分${elapsedSeconds}秒)`]);\n          message.error(errorMsg);\n          return;\n        }\n\n        // 更新进度信息（只在进度变化时添加日志）\n        if (response.data.progress) {\n          const progressMsg = `进度: ${response.data.progress}`;\n          if (!processingLogs.includes(progressMsg)) {\n            setProcessingLogs(prevLogs => [...prevLogs, progressMsg]);\n          }\n        }\n        pollCount++;\n\n        // 检查是否超时\n        if (elapsedTime >= MAX_DURATION) {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          setProcessingLogs(prevLogs => [...prevLogs, `处理超时（${MAX_DURATION / 60000}分钟）`]);\n          message.error(`处理超时（${MAX_DURATION / 60000}分钟）`);\n          return;\n        }\n\n        // 根据当前阶段调整轮询间隔\n        const newInterval = getPollingInterval();\n        if (pollTimer) {\n          clearInterval(pollTimer);\n          pollTimer = setInterval(checkStatus, newInterval);\n        }\n      } catch (error) {\n        var _error$response2;\n        console.error('检查状态失败:', error);\n        const errorMsg = `检查状态失败: ${error.message || '未知错误'}`;\n        if (!processingLogs.includes(errorMsg)) {\n          setProcessingLogs(prevLogs => [...prevLogs, errorMsg]);\n        }\n\n        // 如果是网络错误，继续轮询\n        if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500 || error.code === 'ECONNABORTED' || error.message === 'Network Error') {\n          if (!processingLogs.includes('网络错误，继续轮询...')) {\n            setProcessingLogs(prevLogs => [...prevLogs, '网络错误，继续轮询...']);\n          }\n          return; // 继续轮询\n        } else {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          message.error('检查状态失败');\n        }\n      }\n    };\n\n    // 立即执行一次状态检查\n    await checkStatus();\n\n    // 设置初始轮询间隔\n    pollTimer = setInterval(checkStatus, getPollingInterval());\n\n    // 清理函数\n    return () => {\n      if (pollTimer) {\n        clearInterval(pollTimer);\n      }\n    };\n  };\n  const fetchResults = async taskId => {\n    if (!taskId) {\n      console.error('获取结果错误: 未提供taskId');\n      return;\n    }\n    try {\n      console.log('获取处理结果, taskId:', taskId);\n      const response = await axiosInstance.get(`/api/results/${taskId}`);\n      console.log('结果响应:', response.data);\n      if (response.data.status === 'success') {\n        setProcessingLogs(prevLogs => [...prevLogs, '成功获取处理结果']);\n\n        // 显示结果\n        if (response.data.results) {\n          const results = response.data.results;\n          setProcessingLogs(prevLogs => [...prevLogs, '处理结果:', ...Object.entries(results).map(([key, value]) => {\n            if (typeof value === 'number') {\n              // 对体积数据进行格式化\n              if (key.includes('volume')) {\n                return `${key}: ${value.toFixed(2)} mm³`;\n              }\n              return `${key}: ${value.toFixed(2)}`;\n            }\n            return `${key}: ${value}`;\n          })]);\n\n          // 如果有预览图，显示预览\n          if (response.data.preview) {\n            setPreviewImage(`data:image/png;base64,${response.data.preview}`);\n          }\n\n          // 如果有分割结果图像，也显示\n          if (response.data.segmented_preview) {\n            setProcessingLogs(prevLogs => [...prevLogs, '分割结果图像已生成']);\n          }\n        }\n      } else {\n        throw new Error(response.data.message || '获取结果失败');\n      }\n    } catch (error) {\n      console.error('获取结果失败:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `获取结果失败: ${error.message || '未知错误'}`]);\n      message.error('获取结果失败');\n    }\n  };\n  const validateFile = file => {\n    const extension = '.' + file.name.split('.').pop().toLowerCase();\n    if (!ALLOWED_EXTENSIONS.includes(extension)) {\n      message.error(`不支持的文件类型。支持的类型：${ALLOWED_EXTENSIONS.join(', ')}`);\n      return false;\n    }\n    if (file.size > MAX_FILE_SIZE) {\n      message.error(`文件大小超过限制。最大支持：${MAX_FILE_SIZE / (1024 * 1024)}MB`);\n      return false;\n    }\n    return true;\n  };\n  const uploadProps = {\n    onRemove: file => {\n      const index = fileList.indexOf(file);\n      const newFileList = fileList.slice();\n      newFileList.splice(index, 1);\n      setFileList(newFileList);\n      setPreviewImage(null);\n    },\n    beforeUpload: async file => {\n      if (!validateFile(file)) {\n        return false;\n      }\n\n      // 如果是图像文件，直接预览\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          setPreviewImage(e.target.result);\n          setImageLoading(false);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        // 对于DICOM或NIfTI文件，发送到服务器生成预览\n        setImageLoading(true);\n        try {\n          const formData = new FormData();\n          formData.append('file', file);\n          const response = await axios.post(`${API_BASE}/api/preview`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n          if (response.data.status === 'success') {\n            setPreviewImage(`data:image/png;base64,${response.data.image}`);\n          }\n        } catch (error) {\n          console.error('预览生成失败:', error);\n          message.error('无法生成预览图');\n        } finally {\n          setImageLoading(false);\n        }\n      }\n      setFileList([file]);\n      return false;\n    },\n    fileList,\n    accept: ALLOWED_EXTENSIONS.join(',')\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: \"\\u56FE\\u50CF\\u4E0A\\u4F20\\u4E0E\\u5904\\u7406\",\n    className: \"image-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(Space, {\n      direction: \"vertical\",\n      style: {\n        width: '100%'\n      },\n      children: [!hidePatientSelect && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patient-selector\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          style: {\n            width: '100%'\n          },\n          placeholder: \"\\u8BF7\\u9009\\u62E9\\u60A3\\u8005\",\n          onChange: value => form.setFieldsValue({\n            patient: value\n          }),\n          options: patients.map(p => ({\n            label: p.name,\n            value: p.id\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 21\n          }, this),\n          onClick: () => setShowPatientModal(true),\n          children: \"\\u65B0\\u5EFA\\u60A3\\u8005\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          ...uploadProps,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 27\n            }, this),\n            children: \"\\u9009\\u62E9\\u6587\\u4EF6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-tips\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u652F\\u6301\\u7684\\u6587\\u4EF6\\u7C7B\\u578B\\uFF1A\", ALLOWED_EXTENSIONS.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u6700\\u5927\\u6587\\u4EF6\\u5927\\u5C0F\\uFF1A\", MAX_FILE_SIZE / (1024 * 1024), \"MB\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleUpload,\n        disabled: fileList.length === 0 || !selectedPatient && !form.getFieldValue('patient'),\n        loading: uploading,\n        style: {\n          marginTop: 16\n        },\n        children: uploading ? '上传中' : '开始上传'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), progress > 0 && /*#__PURE__*/_jsxDEV(Progress, {\n        percent: progress,\n        status: progress === 100 ? \"success\" : \"active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this), previewImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-section\",\n        children: imageLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-loading\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u52A0\\u8F7D\\u9884\\u89C8\\u56FE...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 15\n        }, this) : previewImage === 'error' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-error\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u9884\\u89C8\\u56FE\\u52A0\\u8F7D\\u5931\\u8D25\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: previewImage,\n          alt: \"\\u9884\\u89C8\",\n          className: \"preview-image\",\n          loading: \"lazy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }, this), uploadedImageId && !processing && /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: () => handleProcess(),\n        style: {\n          marginTop: 16\n        },\n        children: \"\\u5F00\\u59CB\\u5904\\u7406\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this), processing && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(Progress, {\n          percent: progress,\n          status: progress === 100 ? \"success\" : \"active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            marginTop: 8\n          },\n          children: \"\\u6B63\\u5728\\u5904\\u7406\\u56FE\\u50CF...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }, this), processingLogs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processing-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u5904\\u7406\\u65E5\\u5FD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          size: \"small\",\n          bordered: true,\n          dataSource: processingLogs,\n          renderItem: item => /*#__PURE__*/_jsxDEV(List.Item, {\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              style: {\n                margin: 0,\n                whiteSpace: 'pre-wrap',\n                wordBreak: 'break-all'\n              },\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"\\u65B0\\u5EFA\\u60A3\\u8005\",\n      open: showPatientModal,\n      onCancel: () => setShowPatientModal(false),\n      footer: null,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        form: form,\n        onFinish: handleCreatePatient,\n        layout: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"name\",\n          label: \"\\u59D3\\u540D\",\n          rules: [{\n            required: true,\n            message: '请输入患者姓名'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"patient_id\",\n          label: \"\\u60A3\\u8005ID\",\n          rules: [{\n            required: true,\n            message: '请输入患者ID'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"age\",\n          label: \"\\u5E74\\u9F84\",\n          rules: [{\n            required: true,\n            message: '请输入患者年龄'\n          }],\n          children: /*#__PURE__*/_jsxDEV(InputNumber, {\n            min: 0,\n            max: 150,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"gender\",\n          label: \"\\u6027\\u522B\",\n          rules: [{\n            required: true,\n            message: '请选择患者性别'\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n              value: \"M\",\n              children: \"\\u7537\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: \"F\",\n              children: \"\\u5973\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            children: \"\\u521B\\u5EFA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setShowPatientModal(false),\n            style: {\n              marginLeft: 8\n            },\n            children: \"\\u53D6\\u6D88\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 505,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUpload, \"xTIQJ29HQdm3BOfLDvRJhqQzyhU=\", false, function () {\n  return [Form.useForm];\n});\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useState","useEffect","axios","message","Upload","Button","Space","Card","Progress","List","Select","Modal","Form","Input","InputNumber","UploadOutlined","PlusOutlined","axiosInstance","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","compressImage","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","event","img","Image","src","target","result","canvas","document","createElement","ctx","getContext","width","height","maxSize","Math","round","drawImage","toBlob","blob","File","name","type","lastModified","Date","now","ALLOWED_EXTENSIONS","MAX_FILE_SIZE","ImageUpload","selectedPatient","onUploadSuccess","hidePatientSelect","autoProcess","_s","fileList","setFileList","uploading","setUploading","processing","setProcessing","previewImage","setPreviewImage","uploadedImageId","setUploadedImageId","progress","setProgress","processingLogs","setProcessingLogs","patients","setPatients","imageLoading","setImageLoading","showPatientModal","setShowPatientModal","form","useForm","fetchPatients","response","get","headers","localStorage","getItem","data","error","console","handleCreatePatient","values","post","success","resetFields","setFieldsValue","patient","id","handleUpload","patientId","getFieldValue","formData","FormData","append","onUploadProgress","progressEvent","percentCompleted","loaded","total","log","Error","image","imageId","_id","prevLogs","filename","preview","fetchPreviewImage","_error$response","_error$response$data","withCredentials","status","handleProcess","targetImageId","image_id","task_id","pollProcessingStatus","taskId","pollCount","startTime","PHASE_1_DURATION","PHASE_2_DURATION","MAX_DURATION","pollTimer","getPollingInterval","elapsedTime","checkStatus","elapsedMinutes","floor","elapsedSeconds","currentInterval","includes","phase","clearInterval","fetchResults","errorMsg","progressMsg","newInterval","setInterval","_error$response2","code","results","Object","entries","map","key","value","toFixed","segmented_preview","validateFile","extension","split","pop","toLowerCase","join","size","uploadProps","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","startsWith","e","accept","title","className","children","direction","style","placeholder","onChange","options","p","label","fileName","_jsxFileName","lineNumber","columnNumber","icon","onClick","disabled","length","loading","marginTop","percent","alt","textAlign","bordered","dataSource","renderItem","item","Item","margin","whiteSpace","wordBreak","open","onCancel","footer","onFinish","layout","rules","required","min","max","Option","htmlType","marginLeft","_c","$RefreshReg$"],"sources":["D:/GitHub/mri-web-app/frontend/src/components/ImageUpload/ImageUpload.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { message, Upload, Button, Space, Card, Progress, List, Select, Modal, Form, Input, InputNumber } from 'antd';\nimport { UploadOutlined, PlusOutlined } from '@ant-design/icons';\nimport './ImageUpload.css';\nimport { axiosInstance } from '../../utils/axiosConfig';\n\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\n\n// 图像压缩函数\nconst compressImage = async (file) => {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (event) => {\n      const img = new Image();\n      img.src = event.target.result;\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        // 计算新的尺寸\n        let width = img.width;\n        let height = img.height;\n        const maxSize = 1200; // 最大尺寸\n        \n        if (width > height && width > maxSize) {\n          height = Math.round((height * maxSize) / width);\n          width = maxSize;\n        } else if (height > maxSize) {\n          width = Math.round((width * maxSize) / height);\n          height = maxSize;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // 绘制压缩后的图像\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // 转换为Blob\n        canvas.toBlob((blob) => {\n          resolve(new File([blob], file.name, {\n            type: 'image/jpeg',\n            lastModified: Date.now()\n          }));\n        }, 'image/jpeg', 0.7); // 0.7是压缩质量\n      };\n    };\n  });\n};\n\nconst ALLOWED_EXTENSIONS = ['.dcm', '.nii', '.nii.gz'];\nconst MAX_FILE_SIZE = 100 * 1024 * 1024; // 100MB\n\nconst ImageUpload = ({ selectedPatient, onUploadSuccess, hidePatientSelect, autoProcess = false }) => {\n  const [fileList, setFileList] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [uploadedImageId, setUploadedImageId] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [processingLogs, setProcessingLogs] = useState([]);\n  const [patients, setPatients] = useState([]);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [showPatientModal, setShowPatientModal] = useState(false);\n  const [form] = Form.useForm();\n\n  // 获取患者列表\n  useEffect(() => {\n    if (!hidePatientSelect) {\n      fetchPatients();\n    }\n  }, [hidePatientSelect]);\n\n  const fetchPatients = async () => {\n    try {\n      const response = await axios.get(`${API_BASE}/api/patients`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      setPatients(response.data.patients);\n    } catch (error) {\n      message.error('获取患者列表失败');\n      console.error('获取患者列表错误:', error);\n    }\n  };\n\n  const handleCreatePatient = async (values) => {\n    try {\n      const response = await axios.post(`${API_BASE}/api/patients`, values, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      \n      if (response.data.success) {\n        message.success('患者创建成功');\n        setShowPatientModal(false);\n        form.resetFields();\n        fetchPatients();\n        form.setFieldsValue({ patient: response.data.patient.id });\n      }\n    } catch (error) {\n      message.error('创建患者失败');\n      console.error('创建患者错误:', error);\n    }\n  };\n\n  const handleUpload = async () => {\n    const patientId = selectedPatient || form.getFieldValue('patient');\n    if (!patientId) {\n      message.error('请先选择患者');\n      return;\n    }\n\n    setUploading(true);\n    setProgress(0);\n    setProcessingLogs([]);\n    // 不清除预览图，保留用户上传时的预览\n    // setPreviewImage(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', fileList[0]);\n      formData.append('patient_id', patientId);\n\n      const response = await axiosInstance.post('/api/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          setProgress(percentCompleted);\n        }\n      });\n\n      console.log('上传响应:', response.data);\n\n      // 检查响应数据\n      if (!response.data) {\n        throw new Error('服务器没有返回数据');\n      }\n\n      if (response.data.message === '文件上传成功' && response.data.image) {\n        // 成功处理\n        const imageId = response.data.image.id || response.data.image._id;\n        console.log('设置图像ID:', imageId);\n        setUploadedImageId(imageId);\n        message.success('上传成功');\n        setProcessingLogs(prevLogs => [...prevLogs, `文件上传成功: ${response.data.image.filename || fileList[0].name}`]);\n        \n        if (onUploadSuccess) {\n          onUploadSuccess(response.data.image);\n        }\n\n        // 如果服务器返回了预览图数据，直接使用\n        if (response.data.image.preview) {\n          setPreviewImage(`data:image/png;base64,${response.data.image.preview}`);\n          setProcessingLogs(prevLogs => [...prevLogs, '预览图获取成功']);\n        }\n        // 否则尝试单独获取预览图\n        else if (response.data.image.filename) {\n          try {\n            await fetchPreviewImage(response.data.image.filename);\n          } catch (error) {\n            console.error('获取预览图失败，保留原有预览');\n            // 预览获取失败时保留原有预览，不影响后续处理\n          }\n        }\n\n        console.log('上传完成，uploadedImageId:', imageId, '处理状态:', processing);\n      } else {\n        throw new Error(response.data.message || '上传失败');\n      }\n    } catch (error) {\n      console.error('上传错误:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `上传失败: ${error.message || '未知错误'}`]);\n      message.error(error.response?.data?.message || error.message || '上传失败');\n    } finally {\n      setUploading(false);\n      setProgress(0);\n      setFileList([]);\n    }\n  };\n\n  const fetchPreviewImage = async (filename) => {\n    if (!filename) {\n      console.error('获取预览图失败: 文件名为空');\n      return;\n    }\n\n    setImageLoading(true);\n    try {\n      // 使用相对路径，让axiosInstance处理baseURL\n      const response = await axiosInstance.get(`/api/preview/${filename}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        // 添加withCredentials配置\n        withCredentials: true\n      });\n      \n      console.log('预览图响应:', response.data);\n      \n      if (response.data.status === 'success' && response.data.image) {\n        setPreviewImage(`data:image/png;base64,${response.data.image}`);\n        setProcessingLogs(prevLogs => [...prevLogs, '预览图生成成功']);\n      } else {\n        throw new Error(response.data.message || '获取预览图失败：服务器返回的数据格式不正确');\n      }\n    } catch (error) {\n      console.error('获取预览图失败:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `获取预览图失败: ${error.message || '未知错误'}`]);\n      // 不显示错误消息，因为预览图获取失败不影响主要功能\n      // message.error('获取预览图失败');\n    } finally {\n      setImageLoading(false);\n    }\n  };\n\n  const handleProcess = async (imageId = null) => {\n    const targetImageId = imageId || uploadedImageId;\n    if (!targetImageId) {\n      message.error('没有可处理的图像');\n      return;\n    }\n\n    setProcessing(true);\n    setProcessingLogs(prevLogs => [...prevLogs, '开始处理图像...']);\n\n    try {\n      console.log('开始处理图像, imageId:', targetImageId);\n      const response = await axiosInstance.post('/api/process', {\n        image_id: targetImageId\n      });\n\n      console.log('处理响应:', response.data);\n\n      if (response.data.task_id) {\n        setProcessingLogs(prevLogs => [...prevLogs, `任务ID: ${response.data.task_id}`]);\n        // 立即开始轮询状态\n        pollProcessingStatus(response.data.task_id);\n      } else {\n        throw new Error('未获取到任务ID');\n      }\n    } catch (error) {\n      console.error('处理请求失败:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `处理失败: ${error.message || '未知错误'}`]);\n      message.error('处理请求失败');\n      setProcessing(false);\n    }\n  };\n\n  const pollProcessingStatus = async (taskId) => {\n    if (!taskId) {\n      console.error('轮询错误: 未提供taskId');\n      setProcessing(false);\n      return;\n    }\n\n    let pollCount = 0;\n    let startTime = Date.now();\n    const PHASE_1_DURATION = 7 * 60 * 1000;   // 7分钟\n    const PHASE_2_DURATION = 13 * 60 * 1000;  // 13分钟\n    const MAX_DURATION = 30 * 60 * 1000;      // 30分钟\n    let pollTimer = null;\n\n    const getPollingInterval = () => {\n      const elapsedTime = Date.now() - startTime;\n      if (elapsedTime < PHASE_1_DURATION) {\n        return 30000; // 0-7分钟：30秒\n      } else if (elapsedTime < PHASE_2_DURATION) {\n        return 10000; // 7-13分钟：10秒（高频期）\n      } else {\n        return 60000; // 13分钟后：60秒\n      }\n    };\n\n    const checkStatus = async () => {\n      try {\n        const elapsedTime = Date.now() - startTime;\n        const elapsedMinutes = Math.floor(elapsedTime / 60000);\n        const elapsedSeconds = Math.floor((elapsedTime % 60000) / 1000);\n        const currentInterval = getPollingInterval() / 1000;\n        \n        console.log(`检查处理状态 (${pollCount + 1}次, 已耗时: ${elapsedMinutes}分${elapsedSeconds}秒, 当前轮询间隔: ${currentInterval}秒), taskId:`, taskId);\n        const response = await axiosInstance.get(`/api/status/${taskId}`, {\n          withCredentials: true,\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        console.log('状态响应:', response.data);\n\n        if (!response.data) {\n          throw new Error('未收到状态数据');\n        }\n\n        const status = response.data.status;\n        \n        // 只在状态变化时添加日志\n        if (!processingLogs.includes(`当前状态: ${status}`)) {\n          const phase = elapsedTime < PHASE_1_DURATION ? '初始阶段' : \n                       elapsedTime < PHASE_2_DURATION ? '高频检查阶段' : '最终阶段';\n          setProcessingLogs(prevLogs => [...prevLogs, `当前状态: ${status} (${phase})`]);\n        }\n\n        if (status === 'completed' || status === 'success') {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          setProcessingLogs(prevLogs => [...prevLogs, `处理完成 (总耗时: ${elapsedMinutes}分${elapsedSeconds}秒)`]);\n          await fetchResults(taskId);\n          message.success('处理完成');\n          return;\n        } else if (status === 'failed' || status === 'error') {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          const errorMsg = response.data.error || '处理失败';\n          setProcessingLogs(prevLogs => [...prevLogs, `错误: ${errorMsg} (总耗时: ${elapsedMinutes}分${elapsedSeconds}秒)`]);\n          message.error(errorMsg);\n          return;\n        }\n\n        // 更新进度信息（只在进度变化时添加日志）\n        if (response.data.progress) {\n          const progressMsg = `进度: ${response.data.progress}`;\n          if (!processingLogs.includes(progressMsg)) {\n            setProcessingLogs(prevLogs => [...prevLogs, progressMsg]);\n          }\n        }\n\n        pollCount++;\n        \n        // 检查是否超时\n        if (elapsedTime >= MAX_DURATION) {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          setProcessingLogs(prevLogs => [...prevLogs, `处理超时（${MAX_DURATION / 60000}分钟）`]);\n          message.error(`处理超时（${MAX_DURATION / 60000}分钟）`);\n          return;\n        }\n\n        // 根据当前阶段调整轮询间隔\n        const newInterval = getPollingInterval();\n        if (pollTimer) {\n          clearInterval(pollTimer);\n          pollTimer = setInterval(checkStatus, newInterval);\n        }\n\n      } catch (error) {\n        console.error('检查状态失败:', error);\n        const errorMsg = `检查状态失败: ${error.message || '未知错误'}`;\n        if (!processingLogs.includes(errorMsg)) {\n          setProcessingLogs(prevLogs => [...prevLogs, errorMsg]);\n        }\n        \n        // 如果是网络错误，继续轮询\n        if (error.response?.status >= 500 || error.code === 'ECONNABORTED' || error.message === 'Network Error') {\n          if (!processingLogs.includes('网络错误，继续轮询...')) {\n            setProcessingLogs(prevLogs => [...prevLogs, '网络错误，继续轮询...']);\n          }\n          return; // 继续轮询\n        } else {\n          clearInterval(pollTimer);\n          setProcessing(false);\n          message.error('检查状态失败');\n        }\n      }\n    };\n\n    // 立即执行一次状态检查\n    await checkStatus();\n    \n    // 设置初始轮询间隔\n    pollTimer = setInterval(checkStatus, getPollingInterval());\n\n    // 清理函数\n    return () => {\n      if (pollTimer) {\n        clearInterval(pollTimer);\n      }\n    };\n  };\n\n  const fetchResults = async (taskId) => {\n    if (!taskId) {\n      console.error('获取结果错误: 未提供taskId');\n      return;\n    }\n\n    try {\n      console.log('获取处理结果, taskId:', taskId);\n      const response = await axiosInstance.get(`/api/results/${taskId}`);\n      console.log('结果响应:', response.data);\n\n      if (response.data.status === 'success') {\n        setProcessingLogs(prevLogs => [...prevLogs, '成功获取处理结果']);\n        \n        // 显示结果\n        if (response.data.results) {\n          const results = response.data.results;\n          setProcessingLogs(prevLogs => [\n            ...prevLogs,\n            '处理结果:',\n            ...Object.entries(results).map(([key, value]) => {\n              if (typeof value === 'number') {\n                // 对体积数据进行格式化\n                if (key.includes('volume')) {\n                  return `${key}: ${value.toFixed(2)} mm³`;\n                }\n                return `${key}: ${value.toFixed(2)}`;\n              }\n              return `${key}: ${value}`;\n            })\n          ]);\n\n          // 如果有预览图，显示预览\n          if (response.data.preview) {\n            setPreviewImage(`data:image/png;base64,${response.data.preview}`);\n          }\n\n          // 如果有分割结果图像，也显示\n          if (response.data.segmented_preview) {\n            setProcessingLogs(prevLogs => [...prevLogs, '分割结果图像已生成']);\n          }\n        }\n      } else {\n        throw new Error(response.data.message || '获取结果失败');\n      }\n    } catch (error) {\n      console.error('获取结果失败:', error);\n      setProcessingLogs(prevLogs => [...prevLogs, `获取结果失败: ${error.message || '未知错误'}`]);\n      message.error('获取结果失败');\n    }\n  };\n\n  const validateFile = (file) => {\n    const extension = '.' + file.name.split('.').pop().toLowerCase();\n    if (!ALLOWED_EXTENSIONS.includes(extension)) {\n      message.error(`不支持的文件类型。支持的类型：${ALLOWED_EXTENSIONS.join(', ')}`);\n      return false;\n    }\n    if (file.size > MAX_FILE_SIZE) {\n      message.error(`文件大小超过限制。最大支持：${MAX_FILE_SIZE / (1024 * 1024)}MB`);\n      return false;\n    }\n    return true;\n  };\n\n  const uploadProps = {\n    onRemove: file => {\n      const index = fileList.indexOf(file);\n      const newFileList = fileList.slice();\n      newFileList.splice(index, 1);\n      setFileList(newFileList);\n      setPreviewImage(null);\n    },\n    beforeUpload: async file => {\n      if (!validateFile(file)) {\n        return false;\n      }\n      \n      // 如果是图像文件，直接预览\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          setPreviewImage(e.target.result);\n          setImageLoading(false);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        // 对于DICOM或NIfTI文件，发送到服务器生成预览\n        setImageLoading(true);\n        try {\n          const formData = new FormData();\n          formData.append('file', file);\n          const response = await axios.post(`${API_BASE}/api/preview`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n\n          if (response.data.status === 'success') {\n            setPreviewImage(`data:image/png;base64,${response.data.image}`);\n          }\n        } catch (error) {\n          console.error('预览生成失败:', error);\n          message.error('无法生成预览图');\n        } finally {\n          setImageLoading(false);\n        }\n      }\n      \n      setFileList([file]);\n      return false;\n    },\n    fileList,\n    accept: ALLOWED_EXTENSIONS.join(','),\n  };\n\n  return (\n    <Card title=\"图像上传与处理\" className=\"image-upload-container\">\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        {!hidePatientSelect && (\n          <div className=\"patient-selector\">\n            <Select\n              style={{ width: '100%' }}\n              placeholder=\"请选择患者\"\n              onChange={value => form.setFieldsValue({ patient: value })}\n              options={patients.map(p => ({ label: p.name, value: p.id }))}\n            />\n            <Button \n              type=\"primary\" \n              icon={<PlusOutlined />}\n              onClick={() => setShowPatientModal(true)}\n            >\n              新建患者\n            </Button>\n          </div>\n        )}\n\n        <div className=\"upload-section\">\n          <Upload {...uploadProps}>\n            <Button icon={<UploadOutlined />}>选择文件</Button>\n          </Upload>\n          <div className=\"upload-tips\">\n            <p>支持的文件类型：{ALLOWED_EXTENSIONS.join(', ')}</p>\n            <p>最大文件大小：{MAX_FILE_SIZE / (1024 * 1024)}MB</p>\n          </div>\n        </div>\n        \n        <Button\n          type=\"primary\"\n          onClick={handleUpload}\n          disabled={fileList.length === 0 || (!selectedPatient && !form.getFieldValue('patient'))}\n          loading={uploading}\n          style={{ marginTop: 16 }}\n        >\n          {uploading ? '上传中' : '开始上传'}\n        </Button>\n\n        {progress > 0 && (\n          <Progress percent={progress} status={progress === 100 ? \"success\" : \"active\"} />\n        )}\n\n        {previewImage && (\n          <div className=\"preview-section\">\n            {imageLoading ? (\n              <div className=\"image-loading\">\n                <div className=\"spinner\"></div>\n                <p>加载预览图...</p>\n              </div>\n            ) : previewImage === 'error' ? (\n              <div className=\"preview-error\">\n                <p>预览图加载失败</p>\n              </div>\n            ) : (\n              <img \n                src={previewImage} \n                alt=\"预览\" \n                className=\"preview-image\"\n                loading=\"lazy\"\n              />\n            )}\n          </div>\n        )}\n\n        {uploadedImageId && !processing && (\n          <Button\n            type=\"primary\"\n            onClick={() => handleProcess()}\n            style={{ marginTop: 16 }}\n          >\n            开始处理\n          </Button>\n        )}\n\n        {processing && (\n          <div style={{ marginTop: 16 }}>\n            <Progress percent={progress} status={progress === 100 ? \"success\" : \"active\"} />\n            <div style={{ textAlign: 'center', marginTop: 8 }}>\n              正在处理图像...\n            </div>\n          </div>\n        )}\n\n        {processingLogs.length > 0 && (\n          <div className=\"processing-logs\">\n            <h3>处理日志</h3>\n            <List\n              size=\"small\"\n              bordered\n              dataSource={processingLogs}\n              renderItem={item => (\n                <List.Item>\n                  <pre style={{ margin: 0, whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>\n                    {item}\n                  </pre>\n                </List.Item>\n              )}\n            />\n          </div>\n        )}\n      </Space>\n\n      <Modal\n        title=\"新建患者\"\n        open={showPatientModal}\n        onCancel={() => setShowPatientModal(false)}\n        footer={null}\n      >\n        <Form\n          form={form}\n          onFinish={handleCreatePatient}\n          layout=\"vertical\"\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"姓名\"\n            rules={[{ required: true, message: '请输入患者姓名' }]}\n          >\n            <Input />\n          </Form.Item>\n          \n          <Form.Item\n            name=\"patient_id\"\n            label=\"患者ID\"\n            rules={[{ required: true, message: '请输入患者ID' }]}\n          >\n            <Input />\n          </Form.Item>\n          \n          <Form.Item\n            name=\"age\"\n            label=\"年龄\"\n            rules={[{ required: true, message: '请输入患者年龄' }]}\n          >\n            <InputNumber min={0} max={150} style={{ width: '100%' }} />\n          </Form.Item>\n          \n          <Form.Item\n            name=\"gender\"\n            label=\"性别\"\n            rules={[{ required: true, message: '请选择患者性别' }]}\n          >\n            <Select>\n              <Select.Option value=\"M\">男</Select.Option>\n              <Select.Option value=\"F\">女</Select.Option>\n            </Select>\n          </Form.Item>\n          \n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              创建\n            </Button>\n            <Button onClick={() => setShowPatientModal(false)} style={{ marginLeft: 8 }}>\n              取消\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </Card>\n  );\n};\n\nexport default ImageUpload; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}