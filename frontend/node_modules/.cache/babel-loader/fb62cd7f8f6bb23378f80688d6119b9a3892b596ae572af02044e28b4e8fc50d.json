{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\n\n// 创建axios实例\nconst axiosInstance = axios.create({\n  baseURL: API_BASE,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// 请求拦截器\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\naxiosInstance.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 图像相关API\nexport const imageAPI = {\n  // 上传图像\n  uploadImage: (file, patientId) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('patient_id', patientId);\n    return axiosInstance.post('/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // 获取预览图\n  getPreview: file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return axiosInstance.post('/api/preview', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // 处理图像\n  processImage: imageId => {\n    return axiosInstance.post(`/api/process/${imageId}`);\n  },\n  // 获取任务状态\n  getTaskStatus: taskId => {\n    return axiosInstance.get(`/api/tasks/${taskId}`);\n  },\n  // 获取处理后的图像\n  getProcessedImage: (taskId, filename) => {\n    return axiosInstance.get(`/api/processed/${taskId}/${filename}`);\n  }\n};\n\n// 患者相关API\nexport const patientAPI = {\n  // 获取患者列表\n  getPatients: () => {\n    return axiosInstance.get('/api/patients');\n  },\n  // 创建新患者\n  createPatient: patientData => {\n    return axiosInstance.post('/api/patients', patientData);\n  },\n  // 获取患者详情\n  getPatientDetail: patientId => {\n    return axiosInstance.get(`/api/patients/${patientId}`);\n  }\n};\n\n// 认证相关API\nexport const authAPI = {\n  // 登录\n  login: credentials => {\n    return axiosInstance.post('/api/auth/login', credentials);\n  },\n  // 注册\n  register: userData => {\n    return axiosInstance.post('/api/auth/register', userData);\n  }\n};\nexport default axiosInstance;","map":{"version":3,"names":["axios","API_BASE","process","env","REACT_APP_API_BASE","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","imageAPI","uploadImage","file","patientId","formData","FormData","append","post","getPreview","processImage","imageId","getTaskStatus","taskId","get","getProcessedImage","filename","patientAPI","getPatients","createPatient","patientData","getPatientDetail","authAPI","login","credentials","register","userData"],"sources":["D:/GitHub/mri-web-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000';\r\n\r\n// 创建axios实例\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_BASE,\r\n    timeout: 30000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// 请求拦截器\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 响应拦截器\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n        if (error.response?.status === 401) {\r\n            localStorage.removeItem('token');\r\n            window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 图像相关API\r\nexport const imageAPI = {\r\n    // 上传图像\r\n    uploadImage: (file, patientId) => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        formData.append('patient_id', patientId);\r\n        return axiosInstance.post('/api/upload', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n\r\n    // 获取预览图\r\n    getPreview: (file) => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        return axiosInstance.post('/api/preview', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n\r\n    // 处理图像\r\n    processImage: (imageId) => {\r\n        return axiosInstance.post(`/api/process/${imageId}`);\r\n    },\r\n\r\n    // 获取任务状态\r\n    getTaskStatus: (taskId) => {\r\n        return axiosInstance.get(`/api/tasks/${taskId}`);\r\n    },\r\n\r\n    // 获取处理后的图像\r\n    getProcessedImage: (taskId, filename) => {\r\n        return axiosInstance.get(`/api/processed/${taskId}/${filename}`);\r\n    }\r\n};\r\n\r\n// 患者相关API\r\nexport const patientAPI = {\r\n    // 获取患者列表\r\n    getPatients: () => {\r\n        return axiosInstance.get('/api/patients');\r\n    },\r\n\r\n    // 创建新患者\r\n    createPatient: (patientData) => {\r\n        return axiosInstance.post('/api/patients', patientData);\r\n    },\r\n\r\n    // 获取患者详情\r\n    getPatientDetail: (patientId) => {\r\n        return axiosInstance.get(`/api/patients/${patientId}`);\r\n    }\r\n};\r\n\r\n// 认证相关API\r\nexport const authAPI = {\r\n    // 登录\r\n    login: (credentials) => {\r\n        return axiosInstance.post('/api/auth/login', credentials);\r\n    },\r\n\r\n    // 注册\r\n    register: (userData) => {\r\n        return axiosInstance.post('/api/auth/register', userData);\r\n    }\r\n};\r\n\r\nexport default axiosInstance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}