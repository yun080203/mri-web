{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\mri-web-app\\\\frontend\\\\src\\\\components\\\\Image\\\\ImageUpload.js\",\n  _s2 = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPLOAD_ACTIONS } from '../../store/reducers/uploadReducer';\nimport { imageAPI } from '../../services/api';\nimport { validateFileType } from '../../utils/helpers';\nimport { ERROR_MESSAGES, ACCEPTED_FILE_TYPES } from '../../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUpload = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const dispatch = useDispatch();\n  const {\n    selectedPatient\n  } = useSelector(state => state.patient);\n  const {\n    uploadStatus,\n    error\n  } = useSelector(state => state.upload);\n  const handleFileSelect = useCallback(async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    if (!validateFileType(file)) {\n      dispatch({\n        type: UPLOAD_ACTIONS.UPLOAD_ERROR,\n        payload: ERROR_MESSAGES.INVALID_FILE_TYPE\n      });\n      return;\n    }\n    if (!selectedPatient) {\n      dispatch({\n        type: UPLOAD_ACTIONS.UPLOAD_ERROR,\n        payload: ERROR_MESSAGES.NO_PATIENT\n      });\n      return;\n    }\n    dispatch({\n      type: UPLOAD_ACTIONS.SET_FILE,\n      payload: file\n    });\n    try {\n      // 获取预览图\n      const previewResponse = await imageAPI.getPreview(file);\n      if (previewResponse.data.status === 'success') {\n        dispatch({\n          type: UPLOAD_ACTIONS.UPDATE_PREVIEW,\n          payload: `data:image/png;base64,${previewResponse.data.image}`\n        });\n      }\n    } catch (error) {\n      console.error('预览生成失败:', error);\n    }\n  }, [dispatch, selectedPatient]);\n  const handleUpload = _s(useCallback(_s(async () => {\n    _s();\n    const file = useSelector(state => state.upload.selectedFile);\n    if (!file || !selectedPatient) return;\n    dispatch({\n      type: UPLOAD_ACTIONS.START_UPLOAD\n    });\n    try {\n      const response = await imageAPI.uploadImage(file, selectedPatient.id);\n      if (response.data.status === 'success') {\n        dispatch({\n          type: UPLOAD_ACTIONS.UPLOAD_SUCCESS,\n          payload: response.data.file_info\n        });\n      } else {\n        throw new Error(response.data.message || ERROR_MESSAGES.UPLOAD_FAILED);\n      }\n    } catch (error) {\n      dispatch({\n        type: UPLOAD_ACTIONS.UPLOAD_ERROR,\n        payload: error.message || ERROR_MESSAGES.UPLOAD_FAILED\n      });\n    }\n  }, \"hzRdAR27QWVw8XfIYEWAPJBJrQA=\", false, function () {\n    return [useSelector];\n  }), [dispatch, selectedPatient]), \"hzRdAR27QWVw8XfIYEWAPJBJrQA=\", false, function () {\n    return [useSelector];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: `${ACCEPTED_FILE_TYPES.DICOM},${ACCEPTED_FILE_TYPES.NIFTI}`,\n        onChange: handleFileSelect,\n        disabled: uploadStatus === 'uploading'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        disabled: uploadStatus === 'uploading' || !selectedPatient,\n        children: uploadStatus === 'uploading' ? '上传中...' : '上传图像'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\u652F\\u6301\\u7684\\u6587\\u4EF6\\u683C\\u5F0F\\uFF1A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"DICOM (.dcm)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"NIfTI (.nii, .nii.gz)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s2(ImageUpload, \"UfZRy8AGbxrDmdKPWQifKfaTtkM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useCallback","useDispatch","useSelector","UPLOAD_ACTIONS","imageAPI","validateFileType","ERROR_MESSAGES","ACCEPTED_FILE_TYPES","jsxDEV","_jsxDEV","ImageUpload","_s2","_s","$RefreshSig$","dispatch","selectedPatient","state","patient","uploadStatus","error","upload","handleFileSelect","event","file","target","files","type","UPLOAD_ERROR","payload","INVALID_FILE_TYPE","NO_PATIENT","SET_FILE","previewResponse","getPreview","data","status","UPDATE_PREVIEW","image","console","handleUpload","selectedFile","START_UPLOAD","response","uploadImage","id","UPLOAD_SUCCESS","file_info","Error","message","UPLOAD_FAILED","className","children","accept","DICOM","NIFTI","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/GitHub/mri-web-app/frontend/src/components/Image/ImageUpload.js"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UPLOAD_ACTIONS } from '../../store/reducers/uploadReducer';\r\nimport { imageAPI } from '../../services/api';\r\nimport { validateFileType } from '../../utils/helpers';\r\nimport { ERROR_MESSAGES, ACCEPTED_FILE_TYPES } from '../../utils/constants';\r\n\r\nconst ImageUpload = () => {\r\n    const dispatch = useDispatch();\r\n    const { selectedPatient } = useSelector(state => state.patient);\r\n    const { uploadStatus, error } = useSelector(state => state.upload);\r\n\r\n    const handleFileSelect = useCallback(async (event) => {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n\r\n        if (!validateFileType(file)) {\r\n            dispatch({\r\n                type: UPLOAD_ACTIONS.UPLOAD_ERROR,\r\n                payload: ERROR_MESSAGES.INVALID_FILE_TYPE\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!selectedPatient) {\r\n            dispatch({\r\n                type: UPLOAD_ACTIONS.UPLOAD_ERROR,\r\n                payload: ERROR_MESSAGES.NO_PATIENT\r\n            });\r\n            return;\r\n        }\r\n\r\n        dispatch({ type: UPLOAD_ACTIONS.SET_FILE, payload: file });\r\n\r\n        try {\r\n            // 获取预览图\r\n            const previewResponse = await imageAPI.getPreview(file);\r\n            if (previewResponse.data.status === 'success') {\r\n                dispatch({\r\n                    type: UPLOAD_ACTIONS.UPDATE_PREVIEW,\r\n                    payload: `data:image/png;base64,${previewResponse.data.image}`\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error('预览生成失败:', error);\r\n        }\r\n    }, [dispatch, selectedPatient]);\r\n\r\n    const handleUpload = useCallback(async () => {\r\n        const file = useSelector(state => state.upload.selectedFile);\r\n        if (!file || !selectedPatient) return;\r\n\r\n        dispatch({ type: UPLOAD_ACTIONS.START_UPLOAD });\r\n\r\n        try {\r\n            const response = await imageAPI.uploadImage(file, selectedPatient.id);\r\n            \r\n            if (response.data.status === 'success') {\r\n                dispatch({\r\n                    type: UPLOAD_ACTIONS.UPLOAD_SUCCESS,\r\n                    payload: response.data.file_info\r\n                });\r\n            } else {\r\n                throw new Error(response.data.message || ERROR_MESSAGES.UPLOAD_FAILED);\r\n            }\r\n        } catch (error) {\r\n            dispatch({\r\n                type: UPLOAD_ACTIONS.UPLOAD_ERROR,\r\n                payload: error.message || ERROR_MESSAGES.UPLOAD_FAILED\r\n            });\r\n        }\r\n    }, [dispatch, selectedPatient]);\r\n\r\n    return (\r\n        <div className=\"image-upload\">\r\n            <div className=\"upload-controls\">\r\n                <input\r\n                    type=\"file\"\r\n                    accept={`${ACCEPTED_FILE_TYPES.DICOM},${ACCEPTED_FILE_TYPES.NIFTI}`}\r\n                    onChange={handleFileSelect}\r\n                    disabled={uploadStatus === 'uploading'}\r\n                />\r\n                <button\r\n                    onClick={handleUpload}\r\n                    disabled={uploadStatus === 'uploading' || !selectedPatient}\r\n                >\r\n                    {uploadStatus === 'uploading' ? '上传中...' : '上传图像'}\r\n                </button>\r\n            </div>\r\n            \r\n            {error && (\r\n                <div className=\"error-message\">\r\n                    {error}\r\n                </div>\r\n            )}\r\n            \r\n            <div className=\"upload-instructions\">\r\n                <h4>支持的文件格式：</h4>\r\n                <ul>\r\n                    <li>DICOM (.dcm)</li>\r\n                    <li>NIfTI (.nii, .nii.gz)</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUpload; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,cAAc,EAAEC,mBAAmB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACtB,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEc;EAAgB,CAAC,GAAGb,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;EAC/D,MAAM;IAAEC,YAAY;IAAEC;EAAM,CAAC,GAAGjB,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACI,MAAM,CAAC;EAElE,MAAMC,gBAAgB,GAAGrB,WAAW,CAAC,MAAOsB,KAAK,IAAK;IAClD,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACF,IAAI,EAAE;IAEX,IAAI,CAAClB,gBAAgB,CAACkB,IAAI,CAAC,EAAE;MACzBT,QAAQ,CAAC;QACLY,IAAI,EAAEvB,cAAc,CAACwB,YAAY;QACjCC,OAAO,EAAEtB,cAAc,CAACuB;MAC5B,CAAC,CAAC;MACF;IACJ;IAEA,IAAI,CAACd,eAAe,EAAE;MAClBD,QAAQ,CAAC;QACLY,IAAI,EAAEvB,cAAc,CAACwB,YAAY;QACjCC,OAAO,EAAEtB,cAAc,CAACwB;MAC5B,CAAC,CAAC;MACF;IACJ;IAEAhB,QAAQ,CAAC;MAAEY,IAAI,EAAEvB,cAAc,CAAC4B,QAAQ;MAAEH,OAAO,EAAEL;IAAK,CAAC,CAAC;IAE1D,IAAI;MACA;MACA,MAAMS,eAAe,GAAG,MAAM5B,QAAQ,CAAC6B,UAAU,CAACV,IAAI,CAAC;MACvD,IAAIS,eAAe,CAACE,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;QAC3CrB,QAAQ,CAAC;UACLY,IAAI,EAAEvB,cAAc,CAACiC,cAAc;UACnCR,OAAO,EAAE,yBAAyBI,eAAe,CAACE,IAAI,CAACG,KAAK;QAChE,CAAC,CAAC;MACN;IACJ,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACZmB,OAAO,CAACnB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACnC;EACJ,CAAC,EAAE,CAACL,QAAQ,EAAEC,eAAe,CAAC,CAAC;EAE/B,MAAMwB,YAAY,GAAA3B,EAAA,CAAGZ,WAAW,CAAAY,EAAA,CAAC,YAAY;IAAAA,EAAA;IACzC,MAAMW,IAAI,GAAGrB,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACI,MAAM,CAACoB,YAAY,CAAC;IAC5D,IAAI,CAACjB,IAAI,IAAI,CAACR,eAAe,EAAE;IAE/BD,QAAQ,CAAC;MAAEY,IAAI,EAAEvB,cAAc,CAACsC;IAAa,CAAC,CAAC;IAE/C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMtC,QAAQ,CAACuC,WAAW,CAACpB,IAAI,EAAER,eAAe,CAAC6B,EAAE,CAAC;MAErE,IAAIF,QAAQ,CAACR,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;QACpCrB,QAAQ,CAAC;UACLY,IAAI,EAAEvB,cAAc,CAAC0C,cAAc;UACnCjB,OAAO,EAAEc,QAAQ,CAACR,IAAI,CAACY;QAC3B,CAAC,CAAC;MACN,CAAC,MAAM;QACH,MAAM,IAAIC,KAAK,CAACL,QAAQ,CAACR,IAAI,CAACc,OAAO,IAAI1C,cAAc,CAAC2C,aAAa,CAAC;MAC1E;IACJ,CAAC,CAAC,OAAO9B,KAAK,EAAE;MACZL,QAAQ,CAAC;QACLY,IAAI,EAAEvB,cAAc,CAACwB,YAAY;QACjCC,OAAO,EAAET,KAAK,CAAC6B,OAAO,IAAI1C,cAAc,CAAC2C;MAC7C,CAAC,CAAC;IACN;EACJ,CAAC;IAAA,QAtBgB/C,WAAW;EAAA,IAsBzB,CAACY,QAAQ,EAAEC,eAAe,CAAC,CAAC;IAAA,QAtBdb,WAAW;EAAA,EAsBG;EAE/B,oBACIO,OAAA;IAAKyC,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACzB1C,OAAA;MAAKyC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5B1C,OAAA;QACIiB,IAAI,EAAC,MAAM;QACX0B,MAAM,EAAE,GAAG7C,mBAAmB,CAAC8C,KAAK,IAAI9C,mBAAmB,CAAC+C,KAAK,EAAG;QACpEC,QAAQ,EAAElC,gBAAiB;QAC3BmC,QAAQ,EAAEtC,YAAY,KAAK;MAAY;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CAAC,eACFnD,OAAA;QACIoD,OAAO,EAAEtB,YAAa;QACtBiB,QAAQ,EAAEtC,YAAY,KAAK,WAAW,IAAI,CAACH,eAAgB;QAAAoC,QAAA,EAE1DjC,YAAY,KAAK,WAAW,GAAG,QAAQ,GAAG;MAAM;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,EAELzC,KAAK,iBACFV,OAAA;MAAKyC,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBhC;IAAK;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR,eAEDnD,OAAA;MAAKyC,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAChC1C,OAAA;QAAA0C,QAAA,EAAI;MAAQ;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjBnD,OAAA;QAAA0C,QAAA,gBACI1C,OAAA;UAAA0C,QAAA,EAAI;QAAY;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBnD,OAAA;UAAA0C,QAAA,EAAI;QAAqB;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACjD,GAAA,CAlGID,WAAW;EAAA,QACIT,WAAW,EACAC,WAAW,EACPA,WAAW;AAAA;AAAA4D,EAAA,GAHzCpD,WAAW;AAoGjB,eAAeA,WAAW;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}