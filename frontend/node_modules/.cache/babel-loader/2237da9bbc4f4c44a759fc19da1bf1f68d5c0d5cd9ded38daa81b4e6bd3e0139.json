{"ast":null,"code":"/* eslint-disable no-console */\nlet warned = {};\nconst preWarningFns = [];\n\n/**\n * Pre warning enable you to parse content before console.error.\n * Modify to null will prevent warning.\n */\nexport const preMessage = fn => {\n  preWarningFns.push(fn);\n};\n\n/**\n * Warning if condition not match.\n * @param valid Condition\n * @param message Warning message\n * @example\n * ```js\n * warning(false, 'some error'); // print some error\n * warning(true, 'some error'); // print nothing\n * warning(1 === 2, 'some error'); // print some error\n * ```\n */\nexport function warning(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'warning'), message);\n    if (finalMessage) {\n      console.error(`Warning: ${finalMessage}`);\n    }\n  }\n}\n\n/** @see Similar to {@link warning} */\nexport function note(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'note'), message);\n    if (finalMessage) {\n      console.warn(`Note: ${finalMessage}`);\n    }\n  }\n}\nexport function resetWarned() {\n  warned = {};\n}\nexport function call(method, valid, message) {\n  if (!valid && !warned[message]) {\n    method(false, message);\n    warned[message] = true;\n  }\n}\n\n/** @see Same as {@link warning}, but only warn once for the same message */\nexport function warningOnce(valid, message) {\n  call(warning, valid, message);\n}\n\n/** @see Same as {@link warning}, but only warn once for the same message */\nexport function noteOnce(valid, message) {\n  call(note, valid, message);\n}\nwarningOnce.preMessage = preMessage;\nwarningOnce.resetWarned = resetWarned;\nwarningOnce.noteOnce = noteOnce;\nexport default warningOnce;","map":{"version":3,"names":["warned","preWarningFns","preMessage","fn","push","warning","valid","message","process","env","NODE_ENV","console","undefined","finalMessage","reduce","msg","preMessageFn","error","note","warn","resetWarned","call","method","warningOnce","noteOnce"],"sources":["D:/GitHub/mri-web-app/frontend/node_modules/@rc-component/util/es/warning.js"],"sourcesContent":["/* eslint-disable no-console */\nlet warned = {};\nconst preWarningFns = [];\n\n/**\n * Pre warning enable you to parse content before console.error.\n * Modify to null will prevent warning.\n */\nexport const preMessage = fn => {\n  preWarningFns.push(fn);\n};\n\n/**\n * Warning if condition not match.\n * @param valid Condition\n * @param message Warning message\n * @example\n * ```js\n * warning(false, 'some error'); // print some error\n * warning(true, 'some error'); // print nothing\n * warning(1 === 2, 'some error'); // print some error\n * ```\n */\nexport function warning(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'warning'), message);\n    if (finalMessage) {\n      console.error(`Warning: ${finalMessage}`);\n    }\n  }\n}\n\n/** @see Similar to {@link warning} */\nexport function note(valid, message) {\n  if (process.env.NODE_ENV !== 'production' && !valid && console !== undefined) {\n    const finalMessage = preWarningFns.reduce((msg, preMessageFn) => preMessageFn(msg ?? '', 'note'), message);\n    if (finalMessage) {\n      console.warn(`Note: ${finalMessage}`);\n    }\n  }\n}\nexport function resetWarned() {\n  warned = {};\n}\nexport function call(method, valid, message) {\n  if (!valid && !warned[message]) {\n    method(false, message);\n    warned[message] = true;\n  }\n}\n\n/** @see Same as {@link warning}, but only warn once for the same message */\nexport function warningOnce(valid, message) {\n  call(warning, valid, message);\n}\n\n/** @see Same as {@link warning}, but only warn once for the same message */\nexport function noteOnce(valid, message) {\n  call(note, valid, message);\n}\nwarningOnce.preMessage = preMessage;\nwarningOnce.resetWarned = resetWarned;\nwarningOnce.noteOnce = noteOnce;\nexport default warningOnce;"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAG,CAAC,CAAC;AACf,MAAMC,aAAa,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGC,EAAE,IAAI;EAC9BF,aAAa,CAACG,IAAI,CAACD,EAAE,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACtC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAACJ,KAAK,IAAIK,OAAO,KAAKC,SAAS,EAAE;IAC5E,MAAMC,YAAY,GAAGZ,aAAa,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,YAAY,KAAKA,YAAY,CAACD,GAAG,IAAI,EAAE,EAAE,SAAS,CAAC,EAAER,OAAO,CAAC;IAC7G,IAAIM,YAAY,EAAE;MAChBF,OAAO,CAACM,KAAK,CAAC,YAAYJ,YAAY,EAAE,CAAC;IAC3C;EACF;AACF;;AAEA;AACA,OAAO,SAASK,IAAIA,CAACZ,KAAK,EAAEC,OAAO,EAAE;EACnC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAACJ,KAAK,IAAIK,OAAO,KAAKC,SAAS,EAAE;IAC5E,MAAMC,YAAY,GAAGZ,aAAa,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,YAAY,KAAKA,YAAY,CAACD,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,EAAER,OAAO,CAAC;IAC1G,IAAIM,YAAY,EAAE;MAChBF,OAAO,CAACQ,IAAI,CAAC,SAASN,YAAY,EAAE,CAAC;IACvC;EACF;AACF;AACA,OAAO,SAASO,WAAWA,CAAA,EAAG;EAC5BpB,MAAM,GAAG,CAAC,CAAC;AACb;AACA,OAAO,SAASqB,IAAIA,CAACC,MAAM,EAAEhB,KAAK,EAAEC,OAAO,EAAE;EAC3C,IAAI,CAACD,KAAK,IAAI,CAACN,MAAM,CAACO,OAAO,CAAC,EAAE;IAC9Be,MAAM,CAAC,KAAK,EAAEf,OAAO,CAAC;IACtBP,MAAM,CAACO,OAAO,CAAC,GAAG,IAAI;EACxB;AACF;;AAEA;AACA,OAAO,SAASgB,WAAWA,CAACjB,KAAK,EAAEC,OAAO,EAAE;EAC1Cc,IAAI,CAAChB,OAAO,EAAEC,KAAK,EAAEC,OAAO,CAAC;AAC/B;;AAEA;AACA,OAAO,SAASiB,QAAQA,CAAClB,KAAK,EAAEC,OAAO,EAAE;EACvCc,IAAI,CAACH,IAAI,EAAEZ,KAAK,EAAEC,OAAO,CAAC;AAC5B;AACAgB,WAAW,CAACrB,UAAU,GAAGA,UAAU;AACnCqB,WAAW,CAACH,WAAW,GAAGA,WAAW;AACrCG,WAAW,CAACC,QAAQ,GAAGA,QAAQ;AAC/B,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}